## roles/NFS/tasks/main.yml
## Role main file
# vim:ft=ansible:
---
## Initialise distribution-specific variables
- name: "Include OS-specific vars"
  include_vars: "{{ ansible_os_family }}.yml"

## Setup and install
- include: setup-{{ ansible_os_family }}.yml
  
- name: Ensure directories to export exists
  file: 
    path: "{{ item.strip().split()[0] }}"
    state: directory
  with_items: "{{ nfs_exports }}"
  when: is_server is defined
  notify: Restart NFS

- name: RPC mount opts (NFSv3 only)
  lineinfile:
    path: /etc/default/nfs-kernel-server
    state: present
    regexp: '^RPCMOUNTDOPTS'
    line: 'RPCMOUNTDOPTS= "--manage-gids --no-nfs-version 4"'
  when: is_server is defined

- name: Copy exports file.
  template:
    src: exports.j2
    dest: /etc/exports
    owner: root
    group: root
    mode: 0644
  register: nfs_exports_copy
  when: is_server is defined
  notify: Restart NFS

- name: NFS entries in fstab
  lineinfile:
    path: /etc/fstab
    state: present
    line: '{{ item }} none bind,defaults 0 0'
  with_items:
    - "/usr/local/ /srv/nfs/local"
    - "/home1/ /srv/nfs/home1"
    - "/home2/ /srv/nfs/home2"
  when: is_server is defined

- name: Mount export dirs
  command: mount -a
  when: is_server is defined

- name: AutoFS configs
  template:
    src: 'auto.{{ item }}.j2'
    dest: /etc/auto.{{ item }}
    owner: root
    group: root
    mode: 0644
  register: autofs_copy
  notify: Restart AutoFS
  with_items:
    - master
    - local
    - home

- name: Check if NIS is configured
  stat:
    path: /var/yp/Makefile
  register: yp
  when: is_server is defined
  ignore_errors: yes

- name: Add to NIS
  command: "sed -i "s/^ALL\ =.*/ALL\ =\ \ passwd group hosts rpc services netid protocols netgrp auto.master auto.home auto.local"/" /var/yp/Makefile"
  when: yp.stat.exists and is_server is defined
  notify: 
    - Update NIS
    - Restart NIS

- name: Restart NFS immediately if exports are updated.
  service: "name={{ nfs_server_daemon }} state=restarted"
  when: nfs_exports_copy.changed and is_server is defined

- name: Ensure NFS is running.
  service: "name={{ nfs_server_daemon }} state=restarted enabled=yes"
  when: nfs_exports|length and is_server is defined

...
