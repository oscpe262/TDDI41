EXT4(5)                                                  File Formats Manual                                                  EXT4(5)

NNAAMMEE
       ext2 - the second extended file system
       ext3 - the third extended file system
       ext4 - the fourth extended file system

DDEESSCCRRIIPPTTIIOONN
       The  second,  third, and fourth extended file systems, or ext2, ext3, and ext4 as they are commonly known, are Linux file sys‐
       tems that have historically been the default file system for many Linux distributions.  They are general purpose file  systems
       that  have  been  designed for extensibility and backwards compatibility.  In particular, file systems previously intended for
       use with the ext2 and ext3 file systems can be mounted using the ext4 file system driver, and indeed in many modern Linux dis‐
       tributions, the ext4 file system driver has been configured to handle mount requests for ext2 and ext3 file systems.

FFIILLEE SSYYSSTTEEMM FFEEAATTUURREESS
       A  file  system formatted for ext2, ext3, or ext4 can have some collection of the following file system feature flags enabled.
       Some of these features are not supported by all implementations of the ext2, ext3, and ext4 file system drivers, depending  on
       Linux kernel version in use.  On other operating systems, such as the GNU/HURD or FreeBSD, only a very restrictive set of file
       system features may be supported in their implementations of ext2.

       6644bbiitt
              Enables the file system to be larger than 2^32 blocks.  This feature is set automatically, as needed,  but  it  can  be
              useful  to specify this feature explicitly if the file system might need to be resized larger than 2^32 blocks, even if
              it was smaller than that threshold when it was originally created.  Note that some older kernels and older versions  of
              e2fsprogs will not support file systems with this ext4 feature enabled.

       bbiiggaalllloocc
              This  ext4  feature  enables  clustered  block  allocation,  so that the unit of allocation is a power of two number of
              blocks.  That is, each bit in the what had traditionally been known  as  the  block  allocation  bitmap  now  indicates
              whether a cluster is in use or not, where a cluster is by default composed of 16 blocks.  This feature can decrease the
              time spent on doing block allocation and brings smaller fragmentation, especially for large files.   The  size  can  be
              specified using the mmkkee22ffss --CC option.

              WWaarrnniinngg::  The  bigalloc feature is still under development, and may not be fully supported with your kernel or may have
              various bugs.  Please see the web page http://ext4.wiki.kernel.org/index.php/Bigalloc  for  details.   May  clash  with
              delayed allocation (see nnooddeellaalllloocc mount option).

              This feature requires that the eexxtteenntt feature be enabled.

       ddiirr__iinnddeexx
              Use hashed b-trees to speed up name lookups in large directories.  This feature is supported by ext3 and ext4 file sys‐
              tems, and is ignored by ext2 file systems.

       ddiirr__nnlliinnkk
              This ext4 feature allows more than 65000 subdirectories per directory.

       eennccrryypptt
              This ext4 feature provides file-system level encryption of data blocks and file names.  The inode metadata (timestamps,
              file size, user/group ownership, etc.) is _n_o_t encrypted.

              This  feature  is most useful on file systems with multiple users, or where not all files should be encrypted.  In many
              use cases, especially on single-user systems, encryption at the block device layer using dm-crypt may provide much bet‐
              ter security.

       eexxtt__aattttrr
              This feature enables the use of extended attributes.  This feature is supported by ext2, ext3, and ext4.

       eexxtteenntt
              This  ext4 feature allows the mapping of logical block numbers for a particular inode to physical blocks on the storage
              device to be stored using an extent tree, which is a more efficient data structure than the traditional indirect  block
              scheme  used by the ext2 and ext3 file systems.  The use of the extent tree decreases metadata block overhead, improves
              file system performance, and decreases the needed to run ee22ffsscckk(8) on the file system.  (Note: both eexxtteenntt and  eexxtteennttss
              are accepted as valid names for this feature for historical/backwards compatibility reasons.)

       eexxttrraa__iissiizzee
              This ext4 feature reserves a specific amount of space in each inode for extended metadata such as nanosecond timestamps
              and file creation time, even if the current kernel does not currently need to reserve this much  space.   Without  this
              feature,  the  kernel will reserve the amount of space for features it currently needs, and the rest may be consumed by
              extended attributes.

              For this feature to be useful the inode size must be 256 bytes in size or larger.

       ffiilleettyyppee
              This feature enables the storage of file type information in directory entries.  This feature  is  supported  by  ext2,
              ext3, and ext4.

       fflleexx__bbgg
              This  ext4  feature  allows the per-block group metadata (allocation bitmaps and inode tables) to be placed anywhere on
              the storage media.  In addition, mmkkee22ffss will place the per-block group metadata together starting at  the  first  block
              group of each "flex_bg group".   The size of the flex_bg group can be specified using the --GG option.

       hhaass__jjoouurrnnaall
              Create  a  journal  to  ensure filesystem consistency even across unclean shutdowns.  Setting the filesystem feature is
              equivalent to using the --jj option with mmkkee22ffss or ttuunnee22ffss..  This feature is supported by ext3 and ext4, and  ignored  by
              the ext2 file system driver.

       hhuuggee__ffiillee
              This ext4 feature allows files to be larger than 2 terabytes in size.

       iinnlliinnee__ddaattaa
              Allow data to be stored in the inode and extended attribute area.

       jjoouurrnnaall__ddeevv
              This feature is enabled on the superblock found on an external journal device.  The block size for the external journal
              must be the same as the file system which uses it.

              The external journal device can be used by a file system  by  specifying  the  --JJ  ddeevviiccee==<external-device>  option  to
              mmkkee22ffss(8) or ttuunnee22ffss((88))..

       llaarrggee__ffiillee
              This feature flag is set automatically by modern kernels when a file larger than 2 gigabytes is created.  Very old ker‐
              nels could not handle large files, so this feature flag was used to prohibit those kernels from mounting  file  systems
              that they could not understand.

       mmeettaa__bbgg
              This  ext4  feature allows file systems to be resized on-line without explicitly needing to reserve space for growth in
              the size of the block group descriptors.  This scheme is also used to resize file systems which are  larger  than  2^32
              blocks.   It  is not recommended that this feature be set when a file system is created, since this alternate method of
              storing the block group descriptors will slow down the time needed to mount the file  system,  and  newer  kernels  can
              automatically  set this feature as necessary when doing an online resize and no more reserved space is available in the
              resize inode.

       mmmmpp
              This ext4 feature provides multiple mount protection (MMP).  MMP helps to protect the filesystem  from  being  multiply
              mounted and is useful in shared storage environments.

              Causes the quota files (i.e., user.quota and group.quota which existed in the older quota design) to be hidden inodes.

       pprroojjeecctt
              This  ext4  feature provides project quota support. With this feature, the project ID of inode will be managed when the
              filesystem is mounted.

       qquuoottaa
              Create quota inodes (inode #3 for userquota and inode #4 for group quota) and set them in the  superblock.   With  this
              feature, the quotas will be enabled automatically when the filesystem is mounted.

       rreessiizzee__iinnooddee
              This  file  system  feature  indicates  that  space  has  been reserved so that the block group descriptor table can be
              extended while resizing a mounted file system.  The online resize operation is carried out by the kernel, triggered  by
              rreessiizzee22ffss(8).  By default mmkkee22ffss will attempt to reserve enough space so that the filesystem may grow to 1024 times its
              initial size.  This can be changed using the rreessiizzee extended option.

              This feature requires that the ssppaarrssee__ssuuppeerr feature be enabled.

       ssppaarrssee__ssuuppeerr
              This file system feature is set on all modern ext2, ext3, and ext4 file systems.  It indicates that  backup  copies  of
              the superblock and block group descriptors are present only in a few block groups, not all of them.

       ssppaarrssee__ssuuppeerr22
              This  feature  indicates that there will only be at most two backup superblocks and block group descriptors.  The block
              groups used to store the backup superblock(s) and blockgroup descriptor(s) are stored in the superblock, but typically,
              one  will be located at the beginning of block group #1, and one in the last block group in the file system.  This fea‐
              ture is essentially a more extreme version of sparse_super and is designed to allow a much  larger  percentage  of  the
              disk to have contiguous blocks available for data files.

       uunniinniitt__bbgg
              This  ext4  file system feature indicates that the block group descriptors will be protected using checksums, making it
              safe for mmkkee22ffss(8) to create a file system without initializing all of the block groups.  The kernel will keep  a  high
              watermark  of  unused  inodes, and initialize inode tables and blocks lazily.  This feature speeds up the time to check
              the file system using ee22ffsscckk(8), and it also speeds up the time required for mmkkee22ffss(8) to create the file system.

MMOOUUNNTT OOPPTTIIOONNSS
       This section describes mount options which are specific to ext2, ext3, and ext4.  Other generic mount options may be  used  as
       well; see mmoouunntt(8) for details.

MMoouunntt ooppttiioonnss ffoorr eexxtt22
       The  `ext2' filesystem is the standard Linux filesystem.  Since Linux 2.5.46, for most mount options the default is determined
       by the filesystem superblock. Set them with ttuunnee22ffss(8).

       aaccll|nnooaaccll
              Support POSIX Access Control Lists (or not).  See the aaccll(5) manual page.

       bbssddddff|mmiinniixxddff
              Set the behavior for the _s_t_a_t_f_s system call. The mmiinniixxddff behavior is to return in the _f___b_l_o_c_k_s field the  total  number
              of blocks of the filesystem, while the bbssddddff behavior (which is the default) is to subtract the overhead blocks used by
              the ext2 filesystem and not available for file storage. Thus

              % mount /k -o minixdf; df /k; umount /k

              Filesystem  1024-blocks   Used  Available  Capacity  Mounted on
              /dev/sda6     2630655    86954   2412169      3%     /k

              % mount /k -o bsddf; df /k; umount /k

              Filesystem  1024-blocks  Used  Available  Capacity  Mounted on
              /dev/sda6     2543714      13   2412169      0%     /k

              (Note that this example shows that one can add command line options to the options given in _/_e_t_c_/_f_s_t_a_b.)

       cchheecckk==nnoonnee or nnoocchheecckk
              No checking is done at mount time. This is the default. This is fast.  It is wise to invoke  ee22ffsscckk(8)  every  now  and
              then,  e.g.  at  boot  time.  The  non-default behavior is unsupported (check=normal and check=strict options have been
              removed). Note that these mount options don't have to be supported if ext4 kernel driver is  used  for  ext2  and  ext3
              filesystems.

       ddeebbuugg  Print debugging info upon each (re)mount.

       eerrrroorrss=={ccoonnttiinnuuee|rreemmoouunntt--rroo|ppaanniicc}
              Define  the  behavior  when  an error is encountered.  (Either ignore errors and just mark the filesystem erroneous and
              continue, or remount the filesystem read-only, or panic and halt the system.)  The default is  set  in  the  filesystem
              superblock, and can be changed using ttuunnee22ffss(8).

       ggrrppiidd|bbssddggrroouuppss and nnooggrrppiidd|ssyyssvvggrroouuppss
              These  options  define what group id a newly created file gets.  When ggrrppiidd is set, it takes the group id of the direc‐
              tory in which it is created; otherwise (the default) it takes the fsgid of the current process,  unless  the  directory
              has  the  setgid bit set, in which case it takes the gid from the parent directory, and also gets the setgid bit set if
              it is a directory itself.

       ggrrppqquuoottaa|nnooqquuoottaa|qquuoottaa|uussrrqquuoottaa
              The usrquota (same as quota) mount option enables user quota support on the filesystem. grpquota enables  group  quotas
              support. You need the quota utilities to actually enable and manage the quota system.

       nnoouuiidd3322
              Disables 32-bit UIDs and GIDs.  This is for interoperability with older kernels which only store and expect 16-bit val‐
              ues.

       oollddaalllloocc or oorrlloovv
              Use old allocator or Orlov allocator for new inodes. Orlov is default.

       rreessggiidd==_n and rreessuuiidd==_n
              The ext2 filesystem reserves a certain percentage of the available space (by default 5%, see mmkkee22ffss(8) and ttuunnee22ffss(8)).
              These  options  determine  who can use the reserved blocks.  (Roughly: whoever has the specified uid, or belongs to the
              specified group.)

       ssbb==_n   Instead of block 1, use block _n as superblock. This could be useful when the filesystem has  been  damaged.   (Earlier,
              copies of the superblock would be made every 8192 blocks: in block 1, 8193, 16385, ... (and one got thousands of copies
              on a big filesystem). Since version 1.08, mmkkee22ffss has a -s (sparse superblock) option to reduce  the  number  of  backup
              superblocks,  and  since  version  1.15 this is the default. Note that this may mean that ext2 filesystems created by a
              recent mmkkee22ffss cannot be mounted r/w under Linux 2.0.*.)  The block number here uses 1 k units. Thus, if you want to use
              logical block 32768 on a filesystem with 4 k blocks, use "sb=131072".

       uusseerr__xxaattttrr|nnoouusseerr__xxaattttrr
              Support "user." extended attributes (or not).

MMoouunntt ooppttiioonnss ffoorr eexxtt33
       The ext3 filesystem is a version of the ext2 filesystem which has been enhanced with journaling.  It supports the same options
       as ext2 as well as the following additions:

       jjoouurrnnaall__ddeevv==ddeevvnnuumm/jjoouurrnnaall__ppaatthh==ppaatthh
              When the external journal device's major/minor numbers have changed, these options allow the user to  specify  the  new
              journal  location.   The  journal device is identified either through its new major/minor numbers encoded in devnum, or
              via a path to the device.

       nnoorreeccoovveerryy/nnoollooaadd
              Don't load the journal on mounting.  Note that if the filesystem was not unmounted cleanly, skipping the journal replay
              will lead to the filesystem containing inconsistencies that can lead to any number of problems.

       ddaattaa=={jjoouurrnnaall|oorrddeerreedd|wwrriitteebbaacckk}
              Specifies  the  journaling  mode  for file data.  Metadata is always journaled.  To use modes other than oorrddeerreedd on the
              root filesystem, pass the mode to the kernel as boot parameter, e.g. _r_o_o_t_f_l_a_g_s_=_d_a_t_a_=_j_o_u_r_n_a_l.

              jjoouurrnnaall
                     All data is committed into the journal prior to being written into the main filesystem.

              oorrddeerreedd
                     This is the default mode.  All data is forced directly out to the main file system prior to its  metadata  being
                     committed to the journal.

              wwrriitteebbaacckk
                     Data  ordering  is not preserved – data may be written into the main filesystem after its metadata has been com‐
                     mitted to the journal.  This is rumoured to be the highest-throughput option.  It guarantees internal filesystem
                     integrity, however it can allow old data to appear in files after a crash and journal recovery.

       ddaattaa__eerrrr==iiggnnoorree
              Just print an error message if an error occurs in a file data buffer in ordered mode.

       ddaattaa__eerrrr==aabboorrtt
              Abort the journal if an error occurs in a file data buffer in ordered mode.

       bbaarrrriieerr==00 / bbaarrrriieerr==11
              This  disables  /  enables the use of write barriers in the jbd code.  barrier=0 disables, barrier=1 enables (default).
              This also requires an IO stack which can support barriers, and if jbd gets an error on a barrier write, it will disable
              barriers again with a warning.  Write barriers enforce proper on-disk ordering of journal commits, making volatile disk
              write caches safe to use, at some performance penalty.  If your disks are battery-backed in one way  or  another,  dis‐
              abling barriers may safely improve performance.

       ccoommmmiitt==_n_r_s_e_c
              Sync all data and metadata every _n_r_s_e_c seconds. The default value is 5 seconds. Zero means default.

       uusseerr__xxaattttrr
              Enable Extended User Attributes. See the aattttrr(5) manual page.

       uussrrjjqquuoottaa==aaqquuoottaa..uusseerr|ggrrppjjqquuoottaa==aaqquuoottaa..ggrroouupp|jjqqffmmtt==vvffssvv00
              Apart  from  the  old  quota  system (as in ext2, jqfmt=vfsold aka version 1 quota) ext3 also supports journaled quotas
              (version 2 quota). jqfmt=vfsv0 enables journaled quotas. For journaled quotas the mount  options  usrjquota=aquota.user
              and  grpjquota=aquota.group  are  required to tell the quota system which quota database files to use. Journaled quotas
              have the advantage that even after a crash no quota check is required.

MMoouunntt ooppttiioonnss ffoorr eexxtt44
       The ext4 filesystem is an advanced level of the ext3 filesystem which incorporates scalability  and  reliability  enhancements
       for supporting large filesystem.

       The  options  jjoouurrnnaall__ddeevv,,  nnoorreeccoovveerryy,,  nnoollooaadd,, ddaattaa,, ccoommmmiitt,, oorrlloovv,, oollddaalllloocc,, [[nnoo]]uusseerr__xxaattttrr [[nnoo]]aaccll,, bbssddddff,, mmiinniixxddff,, ddeebbuugg,,
       eerrrroorrss,, ddaattaa__eerrrr,, ggrrppiidd,, bbssddggrroouuppss,, nnooggrrppiidd ssyyssvvggrroouuppss,, rreessggiidd,, rreessuuiidd,, ssbb,, qquuoottaa,, nnooqquuoottaa,, nnoouuiidd3322,, ggrrppqquuoottaa,,  uussrrqquuoottaa  uussrr‐‐
       jjqquuoottaa,, ggrrppjjqquuoottaa aanndd jjqqffmmtt are backwardly compatible with ext3 or ext2.

       jjoouurrnnaall__cchheecckkssuumm
              Enable  checksumming of the journal transactions.  This will allow the recovery code in e2fsck and the kernel to detect
              corruption in the kernel.  It is a compatible change and will be ignored by older kernels.

       jjoouurrnnaall__aassyynncc__ccoommmmiitt
              Commit block can be written to disk without waiting for descriptor blocks. If enabled older kernels  cannot  mount  the
              device.  This will enable 'journal_checksum' internally.

       bbaarrrriieerr==00 / bbaarrrriieerr==11 / bbaarrrriieerr / nnoobbaarrrriieerr
              These mount options have the same effect as in ext3.  The mount options "barrier" and "nobarrier" are added for consis‐
              tency with other ext4 mount options.

              The ext4 filesystem enables write barriers by default.

       iinnooddee__rreeaaddaahheeaadd__bbllkkss==_n
              This tuning parameter controls the maximum number of inode table blocks that ext4's  inode  table  readahead  algorithm
              will pre-read into the buffer cache.  The value must be a power of 2. The default value is 32 blocks.

       ssttrriippee==_n
              Number  of  filesystem  blocks that mballoc will try to use for allocation size and alignment. For RAID5/6 systems this
              should be the number of data disks * RAID chunk size in filesystem blocks.

       ddeellaalllloocc
              Deferring block allocation until write-out time.

       nnooddeellaalllloocc
              Disable delayed allocation. Blocks are allocated when data is copied from user to page cache.

       mmaaxx__bbaattcchh__ttiimmee==_u_s_e_c
              Maximum amount of time ext4 should wait for additional filesystem operations to be batch together  with  a  synchronous
              write  operation.  Since a synchronous write operation is going to force a commit and then a wait for the I/O complete,
              it doesn't cost much, and can be a huge throughput win, we wait for a small amount of time to see if any other transac‐
              tions can piggyback on the synchronous write. The algorithm used is designed to automatically tune for the speed of the
              disk, by measuring the amount of time (on average) that it takes to finish committing a transaction. Call this time the
              "commit  time".  If the time that the transaction has been running is less than the commit time, ext4 will try sleeping
              for the commit time to see if  other  operations  will  join  the  transaction.  The  commit  time  is  capped  by  the
              max_batch_time,  which  defaults  to  15000 µs  (15 ms).  This  optimization  can  be  turned  off  entirely by setting
              max_batch_time to 0.

       mmiinn__bbaattcchh__ttiimmee==_u_s_e_c
              This parameter sets the commit time (as described above) to be at least min_batch_time. It defaults to  zero  microsec‐
              onds. Increasing this parameter may improve the throughput of multi-threaded, synchronous workloads on very fast disks,
              at the cost of increasing latency.

       jjoouurrnnaall__iioopprriioo==_p_r_i_o
              The I/O priority (from 0 to 7, where 0 is the highest priority) which should be used for I/O  operations  submitted  by
              kjournald2  during  a  commit  operation.  This defaults to 3, which is a slightly higher priority than the default I/O
              priority.

       aabboorrtt  Simulate the effects of calling ext4_abort() for debugging purposes.  This is normally used while remounting a filesys‐
              tem which is already mounted.

       aauuttoo__ddaa__aalllloocc|nnooaauuttoo__ddaa__aalllloocc
              Many broken applications don't use fsync() when replacing existing files via patterns such as

              fd = open("foo.new")/write(fd,...)/close(fd)/ rename("foo.new", "foo")

              or worse yet

              fd = open("foo", O_TRUNC)/write(fd,...)/close(fd).

              If  auto_da_alloc  is enabled, ext4 will detect the replace-via-rename and replace-via-truncate patterns and force that
              any delayed allocation blocks are allocated such that at the next journal commit, in the default data=ordered mode, the
              data  blocks  of the new file are forced to disk before the rename() operation is committed.  This provides roughly the
              same level of guarantees as ext3, and avoids the "zero-length" problem that can happen when a system crashes before the
              delayed allocation blocks are forced to disk.

       nnooiinniitt__iittaabbllee
              Do not initialize any uninitialized inode table blocks in the background. This feature may be used by installation CD's
              so that the install process can complete as quickly as possible; the inode table initialization process would  then  be
              deferred until the next time the filesystem is mounted.

       iinniitt__iittaabbllee==nn
              The  lazy  itable init code will wait n times the number of milliseconds it took to zero out the previous block group's
              inode table. This minimizes the impact on system performance while the filesystem's inode table is being initialized.

       ddiissccaarrdd/nnooddiissccaarrdd
              Controls whether ext4 should issue discard/TRIM commands to the underlying block device when blocks are freed.  This is
              useful  for  SSD devices and sparse/thinly-provisioned LUNs, but it is off by default until sufficient testing has been
              done.

       bblloocckk__vvaalliiddiittyy/nnoobblloocckk__vvaalliiddiittyy
              This options enables/disables the in-kernel facility for tracking  filesystem  metadata  blocks  within  internal  data
              structures.  This  allows  multi-block  allocator and other routines to quickly locate extents which might overlap with
              filesystem metadata blocks. This option is intended for debugging purposes and since it negatively affects the  perfor‐
              mance, it is off by default.

       ddiioorreeaadd__lloocckk/ddiioorreeaadd__nnoolloocckk
              Controls whether or not ext4 should use the DIO read locking. If the dioread_nolock option is specified ext4 will allo‐
              cate uninitialized extent before buffer write and convert the extent to initialized after IO completes.  This  approach
              allows  ext4  code to avoid using inode mutex, which improves scalability on high speed storages. However this does not
              work with data journaling and dioread_nolock option will be ignored with kernel warning.  Note that dioread_nolock code
              path  is  only  used  for  extent-based files.  Because of the restrictions this options comprises it is off by default
              (e.g. dioread_lock).

       mmaaxx__ddiirr__ssiizzee__kkbb==nn
              This limits the size of the directories so that any attempt to expand them beyond the specified limit in kilobytes will
              cause an ENOSPC error. This is useful in memory-constrained environments, where a very large directory can cause severe
              performance problems or even provoke the Out Of Memory killer. (For example, if there is only 512 MB memory  available,
              a 176 MB directory may seriously cramp the system's style.)

       ii__vveerrssiioonn
              Enable 64-bit inode version support. This option is off by default.

FFIILLEE AATTTTRRIIBBUUTTEESS
       The  ext2, ext3, and ext4 filesystems support setting the following file attributes on Linux systems using the cchhaattttrr(1) util‐
       ity:

       aa - append only

       AA - no atime updates

       dd - no dump

       DD - synchronous directory updates

       ii - immutable

       SS - synchronous updates

       uu - undeletable

       In addition, the ext3 and ext4 filesystems support the following flag:

       jj - data journaling

       Finally, the ext4 filesystem also supports the following flag:

       ee - extents format

       For descriptions of these attribute flags, please refer to the cchhaattttrr(1) man page.

KKEERRNNEELL SSUUPPPPOORRTT
       This section lists the file system driver (e.g., ext2, ext3, ext4) and upstream kernel version where a particular file  system
       feature  was  supported.   Note  that  in some cases the feature was present in earlier kernel versions, but there were known,
       serious bugs.  In other cases the feature may still be considered in an experimental state.  Finally, note that some distribu‐
       tions may have backported features into older kernels; in particular the kernel versions in certain "enterprise distributions"
       can be extremely misleading.

       ffiilleettyyppee            ext2, 2.2.0

       ssppaarrssee__ssuuppeerr        ext2, 2.2.0

       llaarrggee__ffiillee          ext2, 2.2.0

       hhaass__jjoouurrnnaall         ext3, 2.4.15

       eexxtt__aattttrr            ext2/ext3, 2.6.0

       ddiirr__iinnddeexx           ext3, 2.6.0

       rreessiizzee__iinnooddee        ext3, 2.6.10 (online resizing)

       6644bbiitt               ext4, 2.6.28

       ddiirr__nnlliinnkk           ext4, 2.6.28

       eexxtteenntt              ext4, 2.6.28

       eexxttrraa__iissiizzee         ext4, 2.6.28

       fflleexx__bbgg             ext4, 2.6.28

       hhuuggee__ffiillee           ext4, 2.6.28

       mmeettaa__bbgg             ext4, 2.6.28

       uunniinniitt__bbgg           ext4, 2.6.28

       mmmmpp                 ext4, 3.0

       bbiiggaalllloocc            ext4, 3.2

       qquuoottaa               ext4, 3.6

       iinnlliinnee__ddaattaa         ext4, 3.8

       ssppaarrssee__ssuuppeerr22       ext4, 3.16

       mmeettddaattaa__ccssuumm        ext4, 3.18

       eennccrryypptt             ext4, 4.1

       pprroojjeecctt             ext4, 4.5

SSEEEE AALLSSOO
       mmkkee22ffss(8), mmkkee22ffss..ccoonnff(5), ee22ffsscckk(8), dduummppee22ffss(8), ttuunnee22ffss(8), ddeebbuuggffss(8), mmoouunntt(8), cchhaattttrr(1)

E2fsprogs version 1.43.3                                    September 2016                                                    EXT4(5)
